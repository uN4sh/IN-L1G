#include "uvsqgraphics.h"

//indianred, dodgerblue, mediumspringgreen

struct balle
{
	POINT centre;
	int rayon;
	COULEUR coul;
	int dx, dy;
	int spawn;
};

typedef struct balle BALLE;

struct raket
{
	POINT bg, hd;
	int largeur, hauteur;
	COULEUR coul;
};

typedef struct raket RAKET;

RAKET init_raket(RAKET R)
{
	R.largeur = 100; R.hauteur = 20;
	R.bg.x = WIDTH/2 - R.largeur/2; R.bg.y = 100;
	R.hd.x = WIDTH/2 + R.largeur/2; R.hd.y = R.bg.y + R.hauteur;
	R.coul = mediumspringgreen;
	
	return R;
}

void affiche_raket(RAKET R)
{
	
	draw_fill_rectangle(R.bg, R.hd, R.coul);
	
	POINT centre;
	centre.x = R.bg.x + 2; centre.y = R.bg.y + R.hauteur/2;
	draw_fill_circle(centre, R.hauteur/2, mediumspringgreen); 
	centre.x += R.largeur - 4;
	draw_fill_circle(centre, R.hauteur/2, mediumspringgreen);
	
	R.hd.y -= 18; R.bg.x -= 3; R.hd.x += 3;
	draw_fill_rectangle(R.bg, R.hd, green);
}

void efface_raket(RAKET R)
{
	R.coul = black;
	draw_fill_rectangle(R.bg, R.hd, R.coul);
}

RAKET deplace_raket(RAKET R, int dx)
{
	POINT p;
	p = get_arrow();
	dx = p.x;
}


/*

BALLE deplace_balle(BALLE B)
{
	B.centre.x += B.dx;
	B.centre.y += B.dy;
	return B;
}

void efface_balle(BALLE B)
{
	B.coul = black;
	draw_fill_circle(B.centre,B.rayon,B.coul);
}

void affiche_balle(BALLE B)
{
	draw_fill_circle(B.centre,B.rayon,B.coul);
}

int gauche_droite(BALLE B)
{
	if (B.centre.x <= (WIDTH/2)) return 0; //gauche
	else return 1; //droite
	
}

BALLE rebond_balle(BALLE B) // modifie dx et dy si la balle dépasse d'un bord
{
	// Bord droite
	if ((B.centre.x >= (WIDTH - B.rayon))||(B.centre.x <= B.rayon))		B.dx = -B.dx;
	if ((B.centre.y >= (HEIGHT - B.rayon))||(B.centre.y <= B.rayon)) 	B.dy = -B.dy;
	//if (B.centre.x >= (200))	B.dx = -B.dx;
	
	
	if (B.spawn == 0 && B.dx>0) 
		{ if ((B.centre.x >= (WIDTH/2 - B.rayon)))	B.dx = -B.dx; } // Pour ceux nés à gauche
	if (B.spawn == 1 && B.dx<0)
		{ if (B.centre.x <= (WIDTH/2 + B.rayon))	B.dx = -B.dx; }
		
	return B;
}

void init_tableau(int n, BALLE T[n])
{
	int i;
	int o;
	for (i = 0; i < n; i++)
	{
		T[i].centre.x = alea_int(400) + 100; T[i].centre.y = alea_int(200) + 100;
		T[i].rayon = alea_int(35)+5;
		T[i].coul = couleur_RGB(alea_int(256),alea_int(256),alea_int(256));
		
		T[i].dx = alea_int(4) + 1; // Entre 1 et 5
		o = alea_int(1); // 0 ou 1
		if (o == 1) T[i].dx = - T[i].dx;
		
		T[i].dy = alea_int(10) - 5;
		o = alea_int(1); // 0 ou 1
		if (o == 1) T[i].dy = - T[i].dy;
		
		T[i].spawn = gauche_droite(T[i]);
	}
}

void balles(int n, BALLE T[n])
{
	int i;
	
	for (i = 0; i < n; i++) 
		{
			efface_balle(T[i]);
			T[i] = rebond_balle(T[i]);
			T[i] = deplace_balle(T[i]);
			affiche_balle(T[i]);	
		}
}

*/

int main()
{
	init_graphics(800,800);
	
	RAKET R;
	
	R = init_raket(R);
	affiche_raket(R);

	wait_escape();
	exit(0);
}
